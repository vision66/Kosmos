//
//  UICalendar.swift
//  student
//
//  Created by weizhen on 2019/1/30.
//  Copyright © 2019 Wuhan Mengxin Technology Co., Ltd. All rights reserved.
//

import UIKit

class UICalendar: UIControl {

    /// 选中的时间
    var date : Date = Date() {
        
        didSet {
            
            let calendar = Calendar.current
            
            var start : Date = Date()
            var interval : TimeInterval = 0
            _ = calendar.dateInterval(of: .month, start: &start, interval: &interval, for: date)
            
            days = Int(interval / 86400)
            
            offset = calendar.dateComponents([.weekday], from: start).weekday! - 2
            
            select = calendar.dateComponents([.day], from: date).day! + offset
            
            setNeedsLayout()
        }
    }
    
    // 今天是几号. (`今天`在这个表格的第几格)
    private var select = 0
    
    // 本月第一天是星期几. (`第一天`在这个表格的第几格)
    private var offset = 0
    
    // 本月一共持续多长时间
    private var days = 0
    
    /// 1*7个表示星期的按钮
    private var heads = [UIButton]()
    
    /// 6*7个表示日期的按钮
    private var cells = [UIButton]()
    
    /// 1*7个表示功能的按钮
    private var foots = [UIButton]()
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        
        let bytes_nn : [UInt8] = [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x08, 0x02, 0x00, 0x00, 0x00, 0x02, 0x0d, 0xb1, 0xb2, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x20, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xc9, 0x65, 0x3c, 0x00, 0x00, 0x03, 0x24, 0x69, 0x54, 0x58, 0x74, 0x58, 0x4d, 0x4c, 0x3a, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x78, 0x6d, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x3f, 0x78, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x3d, 0x22, 0xef, 0xbb, 0xbf, 0x22, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x57, 0x35, 0x4d, 0x30, 0x4d, 0x70, 0x43, 0x65, 0x68, 0x69, 0x48, 0x7a, 0x72, 0x65, 0x53, 0x7a, 0x4e, 0x54, 0x63, 0x7a, 0x6b, 0x63, 0x39, 0x64, 0x22, 0x3f, 0x3e, 0x20, 0x3c, 0x78, 0x3a, 0x78, 0x6d, 0x70, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a, 0x78, 0x3d, 0x22, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x3a, 0x6e, 0x73, 0x3a, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x22, 0x20, 0x78, 0x3a, 0x78, 0x6d, 0x70, 0x74, 0x6b, 0x3d, 0x22, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x20, 0x58, 0x4d, 0x50, 0x20, 0x43, 0x6f, 0x72, 0x65, 0x20, 0x35, 0x2e, 0x33, 0x2d, 0x63, 0x30, 0x31, 0x31, 0x20, 0x36, 0x36, 0x2e, 0x31, 0x34, 0x35, 0x36, 0x36, 0x31, 0x2c, 0x20, 0x32, 0x30, 0x31, 0x32, 0x2f, 0x30, 0x32, 0x2f, 0x30, 0x36, 0x2d, 0x31, 0x34, 0x3a, 0x35, 0x36, 0x3a, 0x32, 0x37, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x3e, 0x20, 0x3c, 0x72, 0x64, 0x66, 0x3a, 0x52, 0x44, 0x46, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a, 0x72, 0x64, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x31, 0x39, 0x39, 0x39, 0x2f, 0x30, 0x32, 0x2f, 0x32, 0x32, 0x2d, 0x72, 0x64, 0x66, 0x2d, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2d, 0x6e, 0x73, 0x23, 0x22, 0x3e, 0x20, 0x3c, 0x72, 0x64, 0x66, 0x3a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x64, 0x66, 0x3a, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x3d, 0x22, 0x22, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a, 0x78, 0x6d, 0x70, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6e, 0x73, 0x2e, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x61, 0x70, 0x2f, 0x31, 0x2e, 0x30, 0x2f, 0x22, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a, 0x78, 0x6d, 0x70, 0x4d, 0x4d, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6e, 0x73, 0x2e, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x61, 0x70, 0x2f, 0x31, 0x2e, 0x30, 0x2f, 0x6d, 0x6d, 0x2f, 0x22, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a, 0x73, 0x74, 0x52, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6e, 0x73, 0x2e, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x61, 0x70, 0x2f, 0x31, 0x2e, 0x30, 0x2f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x23, 0x22, 0x20, 0x78, 0x6d, 0x70, 0x3a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x3d, 0x22, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x20, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x68, 0x6f, 0x70, 0x20, 0x43, 0x53, 0x36, 0x20, 0x28, 0x4d, 0x61, 0x63, 0x69, 0x6e, 0x74, 0x6f, 0x73, 0x68, 0x29, 0x22, 0x20, 0x78, 0x6d, 0x70, 0x4d, 0x4d, 0x3a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x3d, 0x22, 0x78, 0x6d, 0x70, 0x2e, 0x69, 0x69, 0x64, 0x3a, 0x30, 0x44, 0x42, 0x33, 0x38, 0x35, 0x37, 0x46, 0x37, 0x44, 0x37, 0x33, 0x31, 0x31, 0x45, 0x36, 0x41, 0x36, 0x46, 0x38, 0x43, 0x36, 0x30, 0x41, 0x41, 0x41, 0x43, 0x42, 0x42, 0x46, 0x36, 0x33, 0x22, 0x20, 0x78, 0x6d, 0x70, 0x4d, 0x4d, 0x3a, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x3d, 0x22, 0x78, 0x6d, 0x70, 0x2e, 0x64, 0x69, 0x64, 0x3a, 0x30, 0x44, 0x42, 0x33, 0x38, 0x35, 0x38, 0x30, 0x37, 0x44, 0x37, 0x33, 0x31, 0x31, 0x45, 0x36, 0x41, 0x36, 0x46, 0x38, 0x43, 0x36, 0x30, 0x41, 0x41, 0x41, 0x43, 0x42, 0x42, 0x46, 0x36, 0x33, 0x22, 0x3e, 0x20, 0x3c, 0x78, 0x6d, 0x70, 0x4d, 0x4d, 0x3a, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x20, 0x73, 0x74, 0x52, 0x65, 0x66, 0x3a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x3d, 0x22, 0x78, 0x6d, 0x70, 0x2e, 0x69, 0x69, 0x64, 0x3a, 0x30, 0x44, 0x42, 0x33, 0x38, 0x35, 0x37, 0x44, 0x37, 0x44, 0x37, 0x33, 0x31, 0x31, 0x45, 0x36, 0x41, 0x36, 0x46, 0x38, 0x43, 0x36, 0x30, 0x41, 0x41, 0x41, 0x43, 0x42, 0x42, 0x46, 0x36, 0x33, 0x22, 0x20, 0x73, 0x74, 0x52, 0x65, 0x66, 0x3a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x3d, 0x22, 0x78, 0x6d, 0x70, 0x2e, 0x64, 0x69, 0x64, 0x3a, 0x30, 0x44, 0x42, 0x33, 0x38, 0x35, 0x37, 0x45, 0x37, 0x44, 0x37, 0x33, 0x31, 0x31, 0x45, 0x36, 0x41, 0x36, 0x46, 0x38, 0x43, 0x36, 0x30, 0x41, 0x41, 0x41, 0x43, 0x42, 0x42, 0x46, 0x36, 0x33, 0x22, 0x2f, 0x3e, 0x20, 0x3c, 0x2f, 0x72, 0x64, 0x66, 0x3a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x20, 0x3c, 0x2f, 0x72, 0x64, 0x66, 0x3a, 0x52, 0x44, 0x46, 0x3e, 0x20, 0x3c, 0x2f, 0x78, 0x3a, 0x78, 0x6d, 0x70, 0x6d, 0x65, 0x74, 0x61, 0x3e, 0x20, 0x3c, 0x3f, 0x78, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x65, 0x6e, 0x64, 0x3d, 0x22, 0x72, 0x22, 0x3f, 0x3e, 0xf7, 0x4b, 0xae, 0xbd, 0x00, 0x00, 0x00, 0x48, 0x49, 0x44, 0x41, 0x54, 0x78, 0xda, 0x62, 0x7c, 0xfd, 0xeb, 0xc7, 0x7f, 0x06, 0x10, 0x60, 0x04, 0x42, 0x86, 0xff, 0x8c, 0xb7, 0x7f, 0x7c, 0x99, 0xf5, 0xe7, 0x8d, 0x20, 0x03, 0xf3, 0x6b, 0x86, 0xdf, 0x59, 0x2c, 0x62, 0x2c, 0xbf, 0x19, 0xfe, 0x4b, 0x32, 0xb2, 0xb2, 0x31, 0x30, 0x32, 0x31, 0x30, 0xfc, 0x65, 0xf8, 0xcf, 0xc2, 0xca, 0xc0, 0xf8, 0xfc, 0xff, 0x6f, 0x88, 0x3c, 0x33, 0x03, 0x23, 0x23, 0x9a, 0x7e, 0x80, 0x00, 0x03, 0x00, 0x84, 0x02, 0x1a, 0x90, 0xaa, 0x28, 0x5a, 0x8f, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82]
        let bytes_sn : [UInt8] = [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x08, 0x02, 0x00, 0x00, 0x00, 0x02, 0x0d, 0xb1, 0xb2, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x20, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xc9, 0x65, 0x3c, 0x00, 0x00, 0x03, 0x24, 0x69, 0x54, 0x58, 0x74, 0x58, 0x4d, 0x4c, 0x3a, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x78, 0x6d, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x3f, 0x78, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x3d, 0x22, 0xef, 0xbb, 0xbf, 0x22, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x57, 0x35, 0x4d, 0x30, 0x4d, 0x70, 0x43, 0x65, 0x68, 0x69, 0x48, 0x7a, 0x72, 0x65, 0x53, 0x7a, 0x4e, 0x54, 0x63, 0x7a, 0x6b, 0x63, 0x39, 0x64, 0x22, 0x3f, 0x3e, 0x20, 0x3c, 0x78, 0x3a, 0x78, 0x6d, 0x70, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a, 0x78, 0x3d, 0x22, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x3a, 0x6e, 0x73, 0x3a, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x22, 0x20, 0x78, 0x3a, 0x78, 0x6d, 0x70, 0x74, 0x6b, 0x3d, 0x22, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x20, 0x58, 0x4d, 0x50, 0x20, 0x43, 0x6f, 0x72, 0x65, 0x20, 0x35, 0x2e, 0x33, 0x2d, 0x63, 0x30, 0x31, 0x31, 0x20, 0x36, 0x36, 0x2e, 0x31, 0x34, 0x35, 0x36, 0x36, 0x31, 0x2c, 0x20, 0x32, 0x30, 0x31, 0x32, 0x2f, 0x30, 0x32, 0x2f, 0x30, 0x36, 0x2d, 0x31, 0x34, 0x3a, 0x35, 0x36, 0x3a, 0x32, 0x37, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x3e, 0x20, 0x3c, 0x72, 0x64, 0x66, 0x3a, 0x52, 0x44, 0x46, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a, 0x72, 0x64, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x31, 0x39, 0x39, 0x39, 0x2f, 0x30, 0x32, 0x2f, 0x32, 0x32, 0x2d, 0x72, 0x64, 0x66, 0x2d, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2d, 0x6e, 0x73, 0x23, 0x22, 0x3e, 0x20, 0x3c, 0x72, 0x64, 0x66, 0x3a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x64, 0x66, 0x3a, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x3d, 0x22, 0x22, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a, 0x78, 0x6d, 0x70, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6e, 0x73, 0x2e, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x61, 0x70, 0x2f, 0x31, 0x2e, 0x30, 0x2f, 0x22, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a, 0x78, 0x6d, 0x70, 0x4d, 0x4d, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6e, 0x73, 0x2e, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x61, 0x70, 0x2f, 0x31, 0x2e, 0x30, 0x2f, 0x6d, 0x6d, 0x2f, 0x22, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a, 0x73, 0x74, 0x52, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6e, 0x73, 0x2e, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x61, 0x70, 0x2f, 0x31, 0x2e, 0x30, 0x2f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x23, 0x22, 0x20, 0x78, 0x6d, 0x70, 0x3a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x3d, 0x22, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x20, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x68, 0x6f, 0x70, 0x20, 0x43, 0x53, 0x36, 0x20, 0x28, 0x4d, 0x61, 0x63, 0x69, 0x6e, 0x74, 0x6f, 0x73, 0x68, 0x29, 0x22, 0x20, 0x78, 0x6d, 0x70, 0x4d, 0x4d, 0x3a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x3d, 0x22, 0x78, 0x6d, 0x70, 0x2e, 0x69, 0x69, 0x64, 0x3a, 0x38, 0x34, 0x37, 0x33, 0x31, 0x34, 0x43, 0x36, 0x37, 0x44, 0x37, 0x32, 0x31, 0x31, 0x45, 0x36, 0x41, 0x36, 0x46, 0x38, 0x43, 0x36, 0x30, 0x41, 0x41, 0x41, 0x43, 0x42, 0x42, 0x46, 0x36, 0x33, 0x22, 0x20, 0x78, 0x6d, 0x70, 0x4d, 0x4d, 0x3a, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x3d, 0x22, 0x78, 0x6d, 0x70, 0x2e, 0x64, 0x69, 0x64, 0x3a, 0x30, 0x44, 0x42, 0x33, 0x38, 0x35, 0x37, 0x43, 0x37, 0x44, 0x37, 0x33, 0x31, 0x31, 0x45, 0x36, 0x41, 0x36, 0x46, 0x38, 0x43, 0x36, 0x30, 0x41, 0x41, 0x41, 0x43, 0x42, 0x42, 0x46, 0x36, 0x33, 0x22, 0x3e, 0x20, 0x3c, 0x78, 0x6d, 0x70, 0x4d, 0x4d, 0x3a, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x20, 0x73, 0x74, 0x52, 0x65, 0x66, 0x3a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x3d, 0x22, 0x78, 0x6d, 0x70, 0x2e, 0x69, 0x69, 0x64, 0x3a, 0x38, 0x34, 0x37, 0x33, 0x31, 0x34, 0x43, 0x34, 0x37, 0x44, 0x37, 0x32, 0x31, 0x31, 0x45, 0x36, 0x41, 0x36, 0x46, 0x38, 0x43, 0x36, 0x30, 0x41, 0x41, 0x41, 0x43, 0x42, 0x42, 0x46, 0x36, 0x33, 0x22, 0x20, 0x73, 0x74, 0x52, 0x65, 0x66, 0x3a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x3d, 0x22, 0x78, 0x6d, 0x70, 0x2e, 0x64, 0x69, 0x64, 0x3a, 0x38, 0x34, 0x37, 0x33, 0x31, 0x34, 0x43, 0x35, 0x37, 0x44, 0x37, 0x32, 0x31, 0x31, 0x45, 0x36, 0x41, 0x36, 0x46, 0x38, 0x43, 0x36, 0x30, 0x41, 0x41, 0x41, 0x43, 0x42, 0x42, 0x46, 0x36, 0x33, 0x22, 0x2f, 0x3e, 0x20, 0x3c, 0x2f, 0x72, 0x64, 0x66, 0x3a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x20, 0x3c, 0x2f, 0x72, 0x64, 0x66, 0x3a, 0x52, 0x44, 0x46, 0x3e, 0x20, 0x3c, 0x2f, 0x78, 0x3a, 0x78, 0x6d, 0x70, 0x6d, 0x65, 0x74, 0x61, 0x3e, 0x20, 0x3c, 0x3f, 0x78, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x65, 0x6e, 0x64, 0x3d, 0x22, 0x72, 0x22, 0x3f, 0x3e, 0xcc, 0x9b, 0x64, 0xcb, 0x00, 0x00, 0x00, 0x52, 0x49, 0x44, 0x41, 0x54, 0x78, 0xda, 0x3c, 0xcb, 0x31, 0x0e, 0x40, 0x40, 0x14, 0x04, 0xd0, 0x99, 0xfd, 0x3f, 0x74, 0x2a, 0x2a, 0x91, 0x08, 0xce, 0xe7, 0xa4, 0x2e, 0x20, 0x91, 0xed, 0x74, 0x2e, 0xb0, 0x1b, 0x6b, 0x14, 0x12, 0xf5, 0xcb, 0xe3, 0xba, 0x6f, 0x29, 0x67, 0x90, 0x04, 0xcd, 0xcc, 0x8f, 0xeb, 0x8c, 0x31, 0x06, 0xa0, 0x48, 0xf3, 0x38, 0x79, 0x11, 0xbc, 0xaa, 0x83, 0x40, 0x3d, 0x0f, 0xe5, 0x46, 0xdc, 0x39, 0x7d, 0x1e, 0x44, 0x5f, 0xda, 0x7e, 0x68, 0xba, 0xff, 0xbf, 0x02, 0x0c, 0x00, 0x31, 0x0d, 0x1c, 0x64, 0x5c, 0xd7, 0x2b, 0xb3, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82]
        let data_nn = Data(bytes_nn)
        let data_sn = Data(bytes_sn)
        let image_nn = UIImage(data: data_nn)?.resizableImage(withCapInsets: UIEdgeInsets(top: 2, left: 2, bottom: 2, right: 2))
        let image_sn = UIImage(data: data_sn)?.resizableImage(withCapInsets: UIEdgeInsets(top: 2, left: 2, bottom: 2, right: 2))

        for i in 0 ..< 7 {
            let button = UIButton()
            button.titleLabel?.font = UIFont.systemFont(ofSize: 10)
            button.backgroundColor = UIColor(hexInteger: 0xd85d71)
            button.layer.borderWidth = 1.0
            button.layer.borderColor = UIColor(hexInteger: 0x972b37).cgColor
            button.nnTitle = i.shortWeekday
            addSubview(button)
            heads.append(button)
        }
        
        for _ in 0 ..< 42 {
            let button = UIButton()
            button.titleLabel?.font = UIFont.systemFont(ofSize: 12)
            button.nnTitleColor = UIColor.black
            button.nnBackgroundImage = image_nn
            button.snBackgroundImage = image_sn
            button.addTarget(self, action: #selector(someDayPressed(_:)), for: .touchUpInside)
            addSubview(button)
            cells.append(button)
        }
        
        for i in 0 ..< 7 {
            let button = UIButton()
            button.titleLabel?.font = UIFont.systemFont(ofSize: 10)
            button.backgroundColor = UIColor(hexInteger: 0xd85d71)
            button.layer.borderWidth = 1.0
            button.layer.borderColor = UIColor(hexInteger: 0x972b37).cgColor
            addSubview(button)
            foots.append(button)
            
            if (i == 0) {
                button.nnTitle = "<"
                button.addTarget(self, action: #selector(prevMonthPressed), for: .touchUpInside)
            }
            if (i == 1) {
                button.nnTitle = "<<"
                button.addTarget(self, action: #selector(prevYearPressed), for: .touchUpInside)
            }
            if (i == 5) {
                button.nnTitle = ">>"
                button.addTarget(self, action: #selector(nextYearPressed), for: .touchUpInside)
            }
            if (i == 6) {
                button.nnTitle = ">"
                button.addTarget(self, action: #selector(nextMonthPressed), for: .touchUpInside)
            }
        }
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func layoutSubviews() {
        super.layoutSubviews()
        
        let maxCols = 7
        let maxRows = 8
        let selfw = bounds.size.width
        let selfh = bounds.size.height
        let cellw = selfw / maxCols
        let cellh = selfh / maxRows
        
        for row in 0 ..< maxRows {
            
            for col in 0 ..< maxCols {
                
                if (row == 0) {
                    heads[col].frame = CGRectMake(col * cellw, row * cellh, cellw, cellh)
                }
                    
                else if (row == 7) {
                    foots[col].frame = CGRectMake(col * cellw, row * cellh, cellw, cellh)
                }
                    
                else {
                    let index = row * maxCols + col - maxCols
                    let dayno = index - offset
                    let button = cells[index]
                    button.frame = CGRectMake(col * cellw, row * cellh, cellw, cellh)
                    button.nnTitle = (dayno <= days && dayno > 0) ? dayno.asString : ""
                    button.isSelected = (index == select)
                }
            }
        }
    }
    
    @objc func prevYearPressed() {
        var comp = DateComponents()
        comp.year = -1
        date = Calendar.current.date(byAdding: comp, to: date)!
        sendActions(for: .valueChanged)
    }

    @objc func nextYearPressed() {
        var comp = DateComponents()
        comp.year =  1
        date = Calendar.current.date(byAdding: comp, to: date)!
        sendActions(for: .valueChanged)
    }

    @objc func prevMonthPressed() {
        var comp = DateComponents()
        comp.month = -1
        date = Calendar.current.date(byAdding: comp, to: date)!
        sendActions(for: .valueChanged)
    }
    @objc func nextMonthPressed() {
        var comp = DateComponents()
        comp.month =  1
        date = Calendar.current.date(byAdding: comp, to: date)!
        sendActions(for: .valueChanged)
    }
    
    @objc func someDayPressed(_ sender: UIButton) {
        
        let index = cells.firstIndex(of: sender)!
        if index > days + offset {
            return
        }
        
        if index < 1 + offset {
            return
        }
        
        var comp = DateComponents()
        comp.day = index - select
        date = Calendar.current.date(byAdding: comp, to: date)!
        sendActions(for: .valueChanged)
    }
}
